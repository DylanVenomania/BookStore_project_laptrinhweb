<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<div class="container my-5">
    <div id="alert-container" class="mb-3"></div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white" id="form-header">Thêm Sản Phẩm Mới</div>
        <div class="card-body">
            <form id="productForm">
                <input type="hidden" id="productId" name="productId" value=""> 
                
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="title" class="form-label">Tên Sách</label>
                        <input type="text" class="form-control" id="title" name="title" required>
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="category" class="form-label">Danh Mục</label>
                        <select class="form-select" id="category" name="category" required>
                            <option value="">-- Đang tải Danh Mục --</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-4">
                        <label for="price" class="form-label">Giá (VND)</label>
                        <input type="number" step="0.01" class="form-control" id="price" name="price" required min="0.01">
                    </div>
                    <div class="mb-3 col-md-4">
                        <label for="quantity" class="form-label">Số Lượng Tồn</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" required min="0">
                    </div>
                    <div class="mb-3 col-md-4">
                        <label for="user" class="form-label">Người Đăng/Tác Giả</label>
                        <select class="form-select" id="user" name="user" required>
                            <option value="">-- Đang tải Người Dùng --</option>
                        </select>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Mô Tả</label>
                    <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                </div>
                 <div class="mb-3">
                    <label for="images" class="form-label">URL Hình Ảnh</label>
                    <input type="text" class="form-control" id="images" name="images">
                </div>

                <button type="submit" class="btn btn-success mt-2" id="submit-btn">Thêm Sản Phẩm</button>
                <button type="button" class="btn btn-secondary mt-2 d-none" id="cancel-edit-btn">Hủy Bỏ</button>
            </form>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header">Danh Sách Sản Phẩm</div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="productTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Tên Sách</th>
                            <th>Giá</th>
                            <th>SL</th>
                            <th>Danh Mục</th>
                            <th>Người Đăng</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <tr><td colspan="7" class="text-center">Đang tải dữ liệu...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>

<script>
    const GRAPHQL_ENDPOINT = '/graphql'; 

    function showNotification(message, type) {
        const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                              ${message}
                              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                           </div>`;
        $('#alert-container').html(alertHtml);
        $('html, body').animate({ scrollTop: 0 }, 500);
    }
    
    // Hàm chuẩn bị dữ liệu cho Mutation
    function getProductInputData() {
        const id = $('#productId').val() ? parseInt($('#productId').val()) : null;
        return {
            id: id,
            title: $('#title').val(),
            price: parseFloat($('#price').val()),
            quantity: parseInt($('#quantity').val()),
            description: $('#description').val(),
            images: $('#images').val(),
            userId: parseInt($('#user').val()),
            categoryId: parseInt($('#category').val())
        };
    }

    // --- SUPPORT: Tải Danh Mục và Người Dùng cho form Select ---
    function loadDependencies() {
        const query = `{
            allCategories { id name }
            allUsers { id fullname }
        }`;
        
        $.ajax({
            url: GRAPHQL_ENDPOINT,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ query: query }),
            success: function(response) {
                const categories = response.data?.allCategories || [];
                const users = response.data?.allUsers || [];
                
                // Render Categories
                const categorySelect = $('#category');
                categorySelect.empty().append('<option value="">-- Chọn Danh Mục --</option>');
                categories.forEach(cat => {
                    categorySelect.append(`<option value="${cat.id}">${cat.name}</option>`);
                });

                // Render Users
                const userSelect = $('#user');
                userSelect.empty().append('<option value="">-- Chọn Người Đăng/Tác Giả --</option>');
                users.forEach(user => {
                    userSelect.append(`<option value="${user.id}">${user.fullname}</option>`);
                });

                // Tải danh sách sản phẩm sau khi tải xong dependencies
                fetchAllProducts();
            },
            error: function() {
                showNotification('Lỗi khi tải Danh mục/Người dùng cho form.', 'danger');
            }
        });
    }

    // --- 1. READ: LẤY TẤT CẢ SẢN PHẨM ---
    function fetchAllProducts() {
        // GraphQL Query: Lấy các trường cần thiết, bao gồm thông tin user và category
        const query = `{
            allProducts {
                id
                title
                price
                quantity
                description
                images
                category { id name }
                user { id fullname }
            }
        }`;
        
        $.ajax({
            url: GRAPHQL_ENDPOINT,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ query: query }),
            success: function(response) {
                const products = response.data?.allProducts || [];
                renderProductTable(products);
            },
            error: function(xhr) {
                console.error("Lỗi khi tải sản phẩm:", xhr.responseText);
                $('#productTableBody').html('<tr><td colspan="7" class="text-center text-danger">Lỗi khi tải dữ liệu sản phẩm.</td></tr>');
            }
        });
    }

    // Hàm render bảng
    function renderProductTable(products) {
        let html = '';
        if (products.length === 0) {
            html = '<tr><td colspan="7" class="text-center">Chưa có sản phẩm nào.</td></tr>';
        } else {
            products.forEach(p => {
                const priceFormatted = Number(p.price).toLocaleString('vi-VN') + ' VND';
                
                // Chuẩn bị data cho nút Sửa (chỉ giữ lại ID user/category cho form)
                const productDataForEdit = {
                    id: p.id,
                    title: p.title,
                    price: p.price,
                    quantity: p.quantity,
                    description: p.description,
                    images: p.images,
                    categoryId: p.category ? p.category.id : null,
                    userId: p.user ? p.user.id : null,
                };

                const productJson = JSON.stringify(productDataForEdit).replace(/"/g, '&quot;');
                
                html += `
                    <tr>
                        <td>${p.id}</td>
                        <td>${p.title}</td>
                        <td>${priceFormatted}</td>
                        <td>${p.quantity}</td>
                        <td>${p.category ? p.category.name : 'N/A'}</td>
                        <td>${p.user ? p.user.fullname : 'N/A'}</td>
                        <td>
                            <button class="btn btn-sm btn-warning edit-btn me-2" data-product="${productJson}">Sửa</button>
                            <button class="btn btn-sm btn-danger delete-btn" data-id="${p.id}">Xóa</button>
                        </td>
                    </tr>
                `;
            });
        }
        $('#productTableBody').html(html);
    }
    
    // --- 2. CREATE/UPDATE: XỬ LÝ FORM SUBMISSION ---
    $('#productForm').submit(function(e) {
        e.preventDefault();
        
        const inputData = getProductInputData();
        const isUpdate = inputData.id !== null;
        let mutation, operationName;

        if (isUpdate) {
            mutation = `
                mutation UpdateProduct($input: ProductInput!) {
                    updateProduct(input: $input) {
                        id title
                    }
                }
            `;
            operationName = "UpdateProduct";
        } else {
            mutation = `
                mutation CreateProduct($input: ProductInput!) {
                    createProduct(input: $input) {
                        id title
                    }
                }
            `;
            operationName = "CreateProduct";
            // Đối với CREATE, không cần truyền ID
            delete inputData.id;
        }

        $.ajax({
            url: GRAPHQL_ENDPOINT,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                query: mutation,
                variables: { input: inputData },
                operationName: operationName
            }),
            success: function(response) {
                if (response.errors) {
                    const errorMsg = response.errors[0]?.message || 'Lỗi không xác định trong quá trình xử lý.';
                    showNotification(errorMsg, 'danger');
                    console.error("GraphQL Errors:", response.errors);
                    return;
                }
                
                showNotification(`Sản phẩm ${isUpdate ? 'cập nhật' : 'thêm mới'} thành công!`, 'success');
                resetFormState();
                fetchAllProducts(); 
            },
            error: function(xhr) {
                showNotification('Lỗi khi gửi yêu cầu. Kiểm tra kết nối API.', 'danger');
                console.error("AJAX Error:", xhr.responseText);
            }
        });
    });

    // --- 3. DELETE: XỬ LÝ XÓA SẢN PHẨM ---
    $(document).on('click', '.delete-btn', function() {
        const productId = parseInt($(this).data('id'));
        if (!confirm('Bạn có chắc chắn muốn xóa sản phẩm ID: ' + productId + ' không?')) {
            return;
        }

        const mutation = `
            mutation DeleteProduct($id: Long!) {
                deleteProduct(id: $id)
            }
        `;
        
        $.ajax({
            url: GRAPHQL_ENDPOINT,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                query: mutation,
                variables: { id: productId },
                operationName: "DeleteProduct"
            }),
            success: function(response) {
                if (response.data?.deleteProduct === true) {
                    showNotification(`Đã xóa sản phẩm ID: ${productId} thành công.`, 'success');
                    fetchAllProducts(); 
                } else {
                    showNotification(`Không tìm thấy hoặc không thể xóa sản phẩm ID: ${productId}.`, 'warning');
                }
            },
            error: function(xhr) {
                showNotification('Lỗi khi xóa sản phẩm. Kiểm tra console.', 'danger');
            }
        });
    });

    // --- XỬ LÝ SỬA (EDIT) ---
    $(document).on('click', '.edit-btn', function() {
        const p = $(this).data('product');
        
        $('#productId').val(p.id);
        $('#title').val(p.title);
        // Định dạng lại giá (GraphQL trả về String cho BigDecimal, nhưng HTML input type="number" cần Number)
        $('#price').val(Number(p.price).toFixed(2)); 
        $('#quantity').val(p.quantity);
        $('#description').val(p.description);
        $('#images').val(p.images);
        
        // Chọn đúng giá trị cho các Select box
        $('#category').val(p.categoryId);
        $('#user').val(p.userId);
        
        $('#form-header').text('Cập Nhật Sản Phẩm (ID: ' + p.id + ')');
        $('#submit-btn').text('Cập Nhật Sản Phẩm').removeClass('btn-success').addClass('btn-warning');
        $('#cancel-edit-btn').removeClass('d-none');
        
        $('html, body').animate({ scrollTop: 0 }, 500);
    });

    // --- RESET TRẠNG THÁI FORM ---
    $('#cancel-edit-btn').click(function() { resetFormState(); });
    function resetFormState() {
        $('#productForm')[0].reset();
        $('#productId').val('');
        $('#form-header').text('Thêm Sản Phẩm Mới');
        $('#submit-btn').text('Thêm Sản Phẩm').removeClass('btn-warning').addClass('btn-success');
        $('#cancel-edit-btn').addClass('d-none');
        $('#alert-container').empty(); 
    }

    // --- KHỞI TẠO ---
    $(function() {
        loadDependencies(); // Bắt đầu bằng việc tải danh mục và người dùng
    });

</script>